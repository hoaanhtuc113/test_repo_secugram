<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>SecuGram Blog</title>
        <link>https://your-docusaurus-test-site.com/blog</link>
        <description>SecuGram Blog</description>
        <lastBuildDate>Mon, 18 Apr 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[MITRE ATT&CK Evaluation (Wizard Spider + Sandworm) - A Closer Look from Detection Engineer's Perspective - Part 1]]></title>
            <link>https://your-docusaurus-test-site.com/blog/first-blog-post</link>
            <guid>first-blog-post</guid>
            <pubDate>Mon, 18 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Who won the MITRE ATT&CK Evaluation?]]></description>
            <content:encoded><![CDATA[<p><strong>Who won the MITRE ATT&amp;CK Evaluation?</strong></p><p>In Mar 2022, MITRE announced the result of their latest evaluations (Wizard Spider + Sandworm). Right after that, it's not that hard to find vendor(s) claiming their detection cover 99%/100% of MITRE Evaluation. I believe MITRE Evaluation and MITRE ATT&amp;CK were never designed to be a compliance standard by any means, "100% detection coverage" is not the Holy Grail or the first indicator to look at from a practitioner's perspective. Whenever thinking about aligning/implementing MITRE ATT&amp;CK, it requires a thorough process and answers to a lot of questions: </p><ul><li>What do we expect from EDR Alerts? Is it Tactic, Technique, or just General detection? </li><li>Do we really need 99%/100% telemetry from EDR? If yes, do we have enough resources/expertise/historical data to review loads and loads of alerts, filter out the noise, fine-tune the default rules, and many others?</li><li>...</li></ul><p>Josh Zelonis published an informative <a href="https://medium.com/the-recovering-analyst/the-mitre-att-ck-evaluation-needs-to-evolve-6bf2074138e4" target="_blank" rel="noopener noreferrer">blog</a> post sharing his thoughts on what buyers should be looking at and it is quite useful if your company is doing your assessment based on the MITRE Evaluation Results. </p><p>Coming back to the content related to the title, I was so curious about the missing piece in vendors’ results from a detection engineer’s perspective. In this series, I will try to figure out what is the common techniques that bypass most of the vendors' built-in detection capabilities. On top of that, another goal is to craft some Sigma rules and contribute to the Sigma community if possible.</p><p><strong>Pulling out the data</strong></p><p>Of course, the first thing needed to be done is to pull the result from the MITRE website. Josh Zelonis also published his script to do this job. Since it requires some changes to match my intention and I’m not a fan of (actually do not know how to use) pandas, I decide to build a new one. The main idea is to consolidate all the results into a single page, and after that use Pivot Table to manipulate and play with the data.
My tiny script can be found in my forked repo <a href="https://github.com/hieuttmmo/WizardSpider-Sandworm/blob/master/Consolidate-WizardSpider-Sandworm.py" target="_blank" rel="noopener noreferrer">here</a>.</p><p><strong>Playing and having fun with the data</strong></p><p>Insert a Pivot Table from the raw data, apply the filter for only undetected techniques, sorted by the number of vendors, and it makes me surprised a little bit inside.
<img loading="lazy" alt="Magic Happened!" src="/assets/images/first_stage-2b26183efbd45cf50b37b20439826844.png" title="San Juan Mountains" width="1226" height="1398" class="img_E7b_">
As we can see, the <code>System Information Discovery - T1082</code> is staying in the first place. Digging more into the actual sub-steps that have been run, we can see the 03 techniques staying under the radar by leveraging Windows API.
<img loading="lazy" alt="More Magic!" src="/assets/images/breakdown_by_criteria-7bc3c31ad41b19326144d5ceb3abdbe5.png" title="San Juan Mountains" width="1702" height="1440" class="img_E7b_">
For the sub-step <code>16.A.2 - rundll32.exe queries HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion for various subkeys</code>, among 8 vendors who can detect this activity, most of the vendors were able to detect it indirectly by monitoring access to registry, only Checkpoint and DeepInstinct trigger alerts related to suspicious Windows API Execution.</p><table><thead><tr><th>Vendor</th><th>Detection Type</th></tr></thead><tbody><tr><td>Checkpoint</td><td>Both</td></tr><tr><td>Cybereason</td><td>API Execution</td></tr><tr><td>Deepinstinct</td><td>Registry Access</td></tr><tr><td>McAfee</td><td>Registry Access</td></tr><tr><td>Microsoft</td><td>Registry Access</td></tr><tr><td>PaloAlto</td><td>Registry Access</td></tr><tr><td>SentinelOne</td><td>Registry Access</td></tr></tbody></table><p>Windows API Execution seems like “the dark of the moon” and poses a great room for improvement shortly. </p><p>In the second and third place, we can see most of the techniques were about rundll32.exe network connectivity. This is quite common and most EDR solutions can provide telemetry about the process that trying to make network connectivity. Event with Sysmon, we can capture this activity with community well-written configuration from @Florian Roth in this <a href="https://github.com/Neo23x0/sysmon-config" target="_blank" rel="noopener noreferrer">repo</a>.</p><p>We have a Sigma rule to detect this technique <a href="https://github.com/SigmaHQ/sigma/blob/cb60813067b40a88e74112d4eb33e61834c35363/rules/windows/network_connection/net_connection_win_rundll32_net_connections.yml" target="_blank" rel="noopener noreferrer">Rundll32 Internet Connection</a>. But it will not trigger any alert during the execution since the IP '192.168.<em>.</em>' already excluded.
<img loading="lazy" alt="More Magic!" src="/assets/images/sigma_rundll32_network_conn-86166b82e519dfe64b4747b1b629829f.png" title="San Juan Mountains" width="1614" height="1166" class="img_E7b_">
If you are trying to implement this rule, ensure that it will be tested carefully with the historical data (maybe 30, 60, or 90-day data). My suggestion is to start with only simple logic (process_name = rundll32.exe and event_id = 3), grouping by DestinationIP and then filtering out from that on a known-good connection.</p><p>This is the end of the first part of this series and the very first Secugram's blog post. Hope you find your own answer to the question in the first section. In the second and maybe the third part of this series, I will go through some interesting sub-steps, try to execute them in my home lab, and write new Sigma rules whenever it is possible.</p>]]></content:encoded>
            <category>secugram</category>
            <category>security</category>
            <category>detection engineer</category>
            <category>mitre</category>
        </item>
    </channel>
</rss>